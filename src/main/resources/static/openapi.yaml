openapi: 3.0.1
info:
  title: Coparts
  version: v1.0.0
  description: >-
    With this API, you can create a service to order any spare parts for any
    car, knowing only the part code.
  contact:
    name: Andrii Vedmid
    email: andrii.vedmid@sigma.software
  x-logo:
    url: ''
servers:
  - url: http://coparts.com.ua
    description: ''
  - url: http://localhost:8080
    description: ''
paths:
  /users/auth:
    post:
      summary: 'Return Bearer token'
      description: 'Accepts a login and password, and returns a bearer token. Available to all users.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
            examples:
              Super User:
                value:
                  email: 'medvik9@gmail.com'
                  password: 'pass'
              User 1:
                value:
                  email: 'user1@test.com'
                  password: 'pass1'
              User 2:
                value:
                  email: 'user2@test.com'
                  password: 'pass2'
        required: true
      tags:
        - Users
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Not Found
        '503':
          content:
            '*/*':
              schema:
                type: string
          description: Service Unavailable
      operationId: userAuth
  /users:
    get:
      summary: 'Get all Users'
      security:
        - JWTAuth: [ ]
      description: 'Returns a list of all registered users. Available to users with role MANAGER or ADMIN.'
      tags:
        - Users
      responses:
        '200':
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: OK
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Not Found
        '503':
          content:
            '*/*':
              schema:
                type: string
          description: Service Unavailable
      operationId: getAllUsers
    post:
      summary: 'Add new user'
      description: 'Register new user with role USER. Available to all users.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              User 1:
                value:
                  firstName: 'Aleksei'
                  lastName: 'Arestovich'
                  email: 'user1@test.com'
                  password: 'pass1'
              User 2:
                value:
                  firstName: 'Taras'
                  lastName: 'Shevchenko'
                  email: 'user2@test.com'
                  password: 'pass2'
        required: true
      tags:
        - Users
      responses:
        '201':
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
          description: Created
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Not Found
        '503':
          content:
            '*/*':
              schema:
                type: string
          description: Service Unavailable
      operationId: userRegister
    put:
      summary: 'Update user'
      security:
        - JWTAuth: [ ]
      description: 'Update user. Available to users with role ADMIN.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              User 2 role USER:
                value:
                  firstName: 'Taras'
                  lastName: 'Shevchenko'
                  email: 'user2@test.com'
                  password: 'pass2'
                  userRole: 'USER'
              User 2 role MANAGER:
                value:
                  firstName: 'Taras'
                  lastName: 'Shevchenko'
                  email: 'user2@test.com'
                  password: 'pass2'
                  userRole: 'MANAGER'
              User 2 role ADMIN:
                value:
                  firstName: 'Taras'
                  lastName: 'Shevchenko'
                  email: 'user2@test.com'
                  password: 'pass2'
                  userRole: 'ADMIN'
        required: true
      tags:
        - Users
      responses:
        '200':
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                type: string
          description: 'can`t parse JSON.  Raw result: This user has not found'
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Not Found
        '503':
          content:
            '*/*':
              schema:
                type: string
          description: Service Unavailable
      operationId: userUpdate
  /users/{email}:
    get:
      summary: 'Get user'
      security:
        - JWTAuth: [ ]
      description: 'Get user by email. Available to users with role MANAGER or ADMIN.'
      tags:
        - Users
      parameters:
        - name: email
          schema:
            type: string
          examples:
            User 2:
              value: 'user2@test.com'
          in: path
          required: true
      responses:
        '200':
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Not Found
        '503':
          content:
            '*/*':
              schema:
                type: string
          description: Service Unavailable
      operationId: getUser
    delete:
      summary: 'Delete user'
      security:
        - JWTAuth: [ ]
      description: 'Delete user by email. Available to users with role ADMIN.'
      tags:
        - Users
      parameters:
        - name: email
          schema:
            type: string
          examples:
            User 2:
              value: 'user2@test.com'
          in: path
          required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Not Found
        '503':
          content:
            '*/*':
              schema:
                type: string
          description: Service Unavailable
      operationId: userDelete
  /parts:
    get:
      summary: 'get all parts'
      description: 'Get all parts from MongoDB. Available for all users.'
      tags:
        - Parts
      parameters:
        - name: page
          schema:
            format: int32
            default: 0
            type: integer
          in: query
          required: false
          description: number of page
          allowEmptyValue: false
          deprecated: false
        - name: size
          schema:
            format: int32
            default: 5
            type: integer
          in: query
          required: false
          description: The size of the number of entries object on the page
          allowEmptyValue: false
          deprecated: false
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageParts'
          description: OK
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Not Found
        '503':
          content:
            '*/*':
              schema:
                type: string
          description: Service Unavailable
      operationId: getAllParts
    post:
      summary: 'Add part'
      security:
        - JWTAuth: [ ]
      description: 'Add new part to MongoDB. Available to users with role MANAGER or ADMIN.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Part'
            examples:
              Part 1:
                value:
                  brand: 'AUDI'
                  code: 'vw2345'
                  description: 'some desc'
                  supplierList:
                    - priceLogo: 'stock'
                      price: 15.15
                      currency: 'USD'
              Part 2:
                value:
                  brand: 'PEUGEOT'
                  code: 'cr12e18'
                  description: 'помпа'
                  supplierList:
                    - priceLogo: 'stock'
                      price: 80.00
                      currency: 'USD'
        required: true
      tags:
        - Parts
      responses:
        '201':
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Part'
          description: Created
        '202':
          content:
            '*/*':
              schema:
                type: string
          description: Accepted
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '503':
          content:
            '*/*':
              schema:
                type: string
          description: Service Unavailable
      operationId: createPart
  /parts/{brand}/{code}:
    get:
      summary: 'Get part'
      description: 'Get some parts. Available for all users.'
      tags:
        - Parts
      parameters:
        - name: brand
          schema:
            type: string
          examples:
            example 1:
              value: 'AUDI'
            example 2:
              value: 'PEUGEOT'
          in: path
          required: true
        - name: code
          schema:
            type: string
          examples:
            example 1:
              value: 'vw2345'
            example 2:
              value: 'cr12e18'
          in: path
          required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Part'
          description: OK
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Not Found
        '503':
          content:
            '*/*':
              schema:
                type: string
          description: Service Unavailable
      operationId: getPart
    put:
      summary: 'Update part'
      security:
        - JWTAuth: [ ]
      description: 'Update information about Part. Available to users with role MANAGER or ADMIN.'
      parameters:
        - name: brand
          schema:
            type: string
          examples:
            example 1:
              value: 'AUDI'
          in: path
          required: true
        - name: code
          schema:
            type: string
          examples:
            example 1:
              value: 'vw2345'
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Part'
            examples:
              Add new supplier to Example 1:
                value:
                  brand: 'AUDI'
                  code: 'vw2345'
                  description: 'some desc'
                  supplierList:
                    - priceLogo: 'stock'
                      price: 15.15
                      currency: 'USD'
                    - priceLogo: 'warehouse'
                      price: 17.15
                      currency: 'USD'
              Change description to Example 1:
                value:
                  brand: 'AUDI'
                  code: 'vw2345'
                  description: 'Changed description'
                  supplierList:
                    - priceLogo: 'stock'
                      price: 15.15
                      currency: 'USD'
                    - priceLogo: 'warehouse'
                      price: 17.15
                      currency: 'USD'
        required: true
      tags:
        - Parts
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Part'
          description: OK
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Not Found
        '503':
          content:
            '*/*':
              schema:
                type: string
          description: Service Unavailable
      operationId: updatePart
    delete:
      summary: 'Delete part'
      security:
        - JWTAuth: [ ]
      description: 'Delete part from MongoDB. Available to users with role MANAGER or ADMIN.'
      tags:
        - Parts
      parameters:
        - name: brand
          schema:
            type: string
          examples:
            example 1:
              value: 'AUDI'
            example 2:
              value: 'PEUGEOT'
          in: path
          required: true
        - name: code
          schema:
            type: string
          examples:
            example 1:
              value: 'vw2345'
            example 2:
              value: 'cr12e18'
          in: path
          required: true
      responses:
        '200':
          description: OK
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Not Found
        '503':
          content:
            '*/*':
              schema:
                type: string
          description: Service Unavailable
      operationId: deletePart
  /parts/sync:
    get:
      summary: 'Sync with external API'
      security:
        - JWTAuth: [ ]
      description: 'Synchronized MongoDB with External API. Available to users with role MANAGER or ADMIN.'
      tags:
        - Parts
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Part'
                description: ''
                example: ''
                externalDocs:
                  url: ''
                  description: ''
              example: ''
          description: OK
          headers: {}
          links: {}
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '503':
          content:
            '*/*':
              schema:
                type: string
                pattern: ''
                description: ''
                example: ''
                externalDocs:
                  url: ''
                  description: ''
              example: ''
          description: Service Unavailable
          headers: {}
          links: {}
      operationId: syncParts
  /orders:
    get:
      summary: 'get all orders'
      security:
        - JWTAuth: [ ]
      description: 'Get all orders by logged user. Available for all authorized users.'
      tags:
        - Orders
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Orders'
          description: OK
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Not Found
        '503':
          content:
            '*/*':
              schema:
                type: string
          description: Service Unavailable
      operationId: getAllOrders
    post:
      summary: 'Add order'
      security:
        - JWTAuth: [ ]
      description: 'Add new order. Available for all authorized users.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Parts'
            example:
                - brand: 'AUDI'
                  code: 'vw2345'
                  description: 'some desc'
                  supplierList:
                        - priceLogo: 'stock'
                          price: 15.15
                          currency: 'USD'
                - brand: 'PEUGEOT'
                  code: 'cr12e18'
                  description: 'помпа'
                  supplierList:
                        - priceLogo: 'stock'
                          price: 80.00
                          currency: 'USD'
        required: true
      tags:
        - Orders
      responses:
        '201':
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Order'
          description: Created
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '503':
          content:
            '*/*':
              schema:
                type: string
          description: Service Unavailable
      operationId: createOrder
  /orders/{orderID}:
    get:
      summary: 'get order'
      parameters:
        - name: orderID
          schema:
            type: string
          in: path
          required: true
      security:
        - JWTAuth: [ ]
      description: 'Get order by logged user. Available for all authorized users.'
      tags:
        - Orders
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Orders'
          description: OK
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Not Found
        '503':
          content:
            '*/*':
              schema:
                type: string
          description: Service Unavailable
      operationId: getOrder
    put:
      summary: 'Update order'
      parameters:
        - name: orderID
          schema:
            type: string
          in: path
          required: true
      security:
        - JWTAuth: [ ]
      description: 'Update order. Available for all authorized users.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Parts'
        required: true
      tags:
        - Orders
      responses:
        '200':
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Order'
          description: Ok
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '503':
          content:
            '*/*':
              schema:
                type: string
          description: Service Unavailable
      operationId: updateOrder
    delete:
      summary: 'Delete order'
      parameters:
        - name: orderID
          schema:
            type: string
          in: path
          required: true
      security:
        - JWTAuth: [ ]
      description: 'Delete order. Available for all authorized users.'
      tags:
        - Orders
      responses:
        '200':
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Order'
          description: Ok
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '503':
          content:
            '*/*':
              schema:
                type: string
          description: Service Unavailable
      operationId: deleteOrder
  /orders/{orderID}/place:
    get:
      summary: 'place order'
      parameters:
        - name: orderID
          schema:
            type: string
          in: path
          required: true
      security:
        - JWTAuth: [ ]
      description: 'Get order by logged user. Available for all authorized users.'
      tags:
        - Orders
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Orders'
          description: OK
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Not Found
        '503':
          content:
            '*/*':
              schema:
                type: string
          description: Service Unavailable
      operationId: passOrder

components:
  schemas:
    GrantedAuthority:
      type: object
      properties:
        authority:
          type: string
    User:
      type: object
      properties:
        id:
          format: int32
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        userRole:
          enum:
            - USER
            - MANAGER
            - ADMIN
          type: string
        enabled:
          type: boolean
        accountNonLocked:
          type: boolean
        accountNonExpired:
          type: boolean
        credentialsNonExpired:
          type: boolean
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/GrantedAuthority'
        username:
          type: string
    Part:
      required:
        - brand
        - code
      type: object
      properties:
        id:
          type: string
        brand:
          type: string
        code:
          type: string
        description:
          type: string
        supplierList:
          type: array
          items:
            $ref: '#/components/schemas/SupplierPart'
    Parts:
      type: array
      items:
        $ref: '#/components/schemas/Part'
    Order:
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: '#/components/schemas/User'
        parts:
          type: array
          items:
            $ref: '#/components/schemas/Part'
    Orders:
      type: array
      items:
        $ref: '#/components/schemas/Order'
    SupplierPart:
      type: object
      properties:
        priceLogo:
          type: string
        price:
          type: string
        currency:
          enum:
            - UAH
            - USD
            - EUR
          type: string
    RegisterRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
    AuthenticationRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    PageParts:
      type: object
      properties:
        parts:
          type: array
          items:
            $ref: '#/components/schemas/Part'
        totalItems:
          type: integer
          format: int64
        currentPage:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
  securitySchemes:
    JWTAuth:
      scheme: bearer
      bearerFormat: JWT
      type: http
      description: |-
        Example: 
        > Authorization: Bearer <token>
  headers: {}
  responses: {}
  parameters: {}
externalDocs:
  description: >-
    [github.com/vedmik/coparts ] - You can find the source code, as well as a description of how to run
    it on AWS EC2
  url: 'https://github.com/vedmik/coparts'
